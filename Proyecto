#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <random>
using namespace std;

// Función para generar vector de enteros aleatorios
vector<int> generateRandomVector(int length) {
  random_device rd;
  mt19937 gen(rd());
  uniform_int_distribution<> dist(1, 1000);
  
  vector<int> vec(length);
  generate(begin(vec), end(vec), [&] { return dist(gen); });

  return vec;  
}

// Función para imprimir vector
void printVector(const vector<int>& vec) {
  for(int x : vec) {
    cout << x << " "; 
  }
  cout << endl;
}  

// Algoritmo de ordenamiento por burbuja
int bubbleSort(vector<int>& arr) {
  int size = arr.size(); 
  int iteraciones = 0;
  
  for(int i = 0; i < size-1; ++i) {
    for(int j = 0; j < size-i-1; ++j) {
      iteraciones++;
      if(arr[j] > arr[j+1])
        swap(arr[j], arr[j+1]); 
    }
  }
  
  return iteraciones; 
}

// Algoritmo de ordenamiento por inserción
int insertionSort(vector<int>& arr) {
  int size = arr.size();
  int iteraciones = 0; 
  
  for(int i = 1; i < size; ++i) {
    int temp = arr[i];
    int j = i - 1;
    
    while(j >= 0 && arr[j] > temp) {
      iteraciones++;
      arr[j+1] = arr[j];
      --j;
    }
    
    arr[j+1] = temp;
  }
  
  return iteraciones;  
}

// Algoritmo de ordenamiento por selección  
int selectionSort(vector<int>& arr){
  int size= arr.size();
  int iteraciones = 0;
	
  for(int i = 0; i < size-1; i++){
    int minIndex = i;
		
    for(int j = i+1; j < size; j++){
      iteraciones++;
      if(arr[j] < arr[minIndex])
        minIndex = j; 
    }
		
    swap(arr[minIndex], arr[i]); 
  }
  
  return iteraciones;
}

// Algoritmo de conteo (Counting sort)
int countingSort(vector<int>& arr) {
  int max = *max_element(arr.begin(), arr.end()); 
  int min = *min_element(arr.begin(), arr.end());
  int range = max - min + 1;
        
  vector<int> count(range), output(arr.size());
  int iteraciones = 0;
  
  for(int i = 0; i < arr.size(); i++) {
    iteraciones++; 
    count[arr[i]-min]++; 
  }
              
  for(int i = 1; i < count.size(); i++) {
    iteraciones++;
    count[i] += count[i-1];
  }
       
  for(int i = arr.size()-1; i >= 0; i--) {
    iteraciones++;
    output[count[arr[i]-min]-1] = arr[i];
    count[arr[i]-min]--;
  }
        
  for(int i = 0; i < arr.size(); i++) { 
    iteraciones++;
    arr[i] = output[i];   
  }
  
  return iteraciones;
}

// QuickSort 
int partition(vector<int>& arr, int low, int high) {
  int pivot = arr[high];
  int i = (low - 1); 
  int iteraciones = 0;

  for(int j = low; j <= high- 1; j++) {
    iteraciones++;
    if (arr[j] < pivot) {
      i++;
      swap(arr[i], arr[j]); 
    }
  }

  swap(arr[i + 1], arr[high]);
  
  return (i + 1); 
}

void quickSort(vector<int>& arr, int low, int high, int& iteraciones) {
  if (low < high) { 
    int pi = partition(arr, low, high);

    iteraciones++;
    quickSort(arr, low, pi - 1, iteraciones);
    iteraciones++; 
    quickSort(arr, pi + 1, high, iteraciones); 
  }
}

// Merge Sort
void merge(vector<int>& arr, int l, int m, int r, int& iteraciones) {
  
  // Código de merge
  
  iteraciones++;
}

void mergeSort(vector<int>& arr, int l, int r, int& iteraciones) {
  if (l < r) {
  
    int m = l + (r - l) / 2;

    mergeSort(arr, l, m, iteraciones);
    mergeSort(arr, m + 1, r, iteraciones);
    
    merge(arr, l, m, r, iteraciones);
  }  
}
  
int main() {

  int n;
  cout << "Ingrese el tamaño del arreglo aleatorio: ";
  cin >> n;
  
  vector<int> arr = generateRandomVector(n);

  cout << "Arreglo inicial: \n";
  printVector(arr);  

  int iteracionesBubble = bubbleSort(arr); 
  cout << "Iteraciones Bubble Sort: " << iteracionesBubble << endl;

  int iteracionesInsertion = insertionSort(arr);
  cout << "Iteraciones Insertion Sort: " << iteracionesInsertion << endl;  

  int iteracionesSelection = selectionSort(arr);
  cout << "Iteraciones Selection Sort: " << iteracionesSelection << endl;

  int iteracionesCounting = countingSort(arr);
  cout << "Iteraciones Counting Sort: " << iteracionesCounting << endl;

  int iteracionesQuick = 0;
  quickSort(arr, 0, arr.size() - 1, iteracionesQuick);
  cout << "Iteraciones Quicksort: " << iteracionesQuick << endl;

  int iteracionesMerge = 0; 
  mergeSort(arr, 0, arr.size() - 1, iteracionesMerge);
  cout << "Iteraciones Merge Sort: " << iteracionesMerge << endl;  

  cout << "\nArreglo ordenado: \n";
  printVector(arr);

  return 0;
}
